# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ feat/esp32 ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      - uses: dorny/paths-filter@v2
        id: atmega_change
        with:
          filters: |
            changed:
            - 'firmware/avr/*'
      
      - name: ATMega - Install GCC
        run: |
          sudo apt-get -y install make srecord xz-utils
          curl 'https://downloads.arduino.cc/arduino-1.8.19-linux64.tar.xz' -o /tmp/arduino.tar.xz
          tar xf /tmp/arduino.tar.xz -C /tmp/
        shell: bash
        if: steps.atmega_change.outputs.changed == 'true'
      - name: ATMega - Build
        if: steps.atmega_change.outputs.changed == 'true'
        run: |
          export PATH=/tmp/arduino-1.8.19/hardware/tools/avr/bin:$PATH
          cd firmware/avr && make
        shell: bash
      - name: Collect Files
        if: steps.atmega_change.outputs.changed == 'true'
        run: |
          cp firmware/avr/gbaHD-avr.bin firmware/esp32/data/atmega.bin
          (cd firmware/avr/ && make clean)
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@users.noreply.github.com'
          git config pull.rebase false 
          [ ! $(git status --porcelain | wc -l) -eq "0" ] && git commit firmware/esp32/data/atmega.bin -m "Update atmega.bin" && git push
        shell: bash
